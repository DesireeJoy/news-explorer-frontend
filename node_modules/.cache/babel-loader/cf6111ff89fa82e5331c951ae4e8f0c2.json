{"ast":null,"code":"import { token } from \"./constants.js\";\n\nclass MainApi {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.register = (email, password) => {\n      return fetch(`${BASE_URL}/signup`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(res => {\n        if (res.status === 201 || res.status === 200) {\n          return res.json();\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.authorize = (email, password) => {\n      return fetch(`${BASE_URL}/signin`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        if (data.message) {\n          return;\n        }\n\n        localStorage.setItem(\"token\", data.token);\n        return;\n      });\n    };\n\n    this.checkToken = token => {\n      return fetch(`${BASE_URL}/users/me`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `token=${token}`\n        }\n      }).then(res => {\n        return res.json();\n      }).then(data => data);\n    };\n\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n}\n\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.lmontem-news-explorer.students.nomoreparties.site/',\n  headers: {\n    \"Accept\": \"application/json\",\n    'Content-Type': 'application/json',\n    \"Authorization\": `token=${token}`\n  }\n});","map":{"version":3,"sources":["/Users/desireebradish/news-explorer-frontend/src/utils/MainApi.js"],"names":["token","MainApi","constructor","baseUrl","headers","register","email","password","fetch","BASE_URL","method","Accept","body","JSON","stringify","then","res","status","json","catch","err","console","log","authorize","data","message","localStorage","setItem","checkToken","Authorization","_baseUrl","_headers","mainApi"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;;AACA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAuB;AAAA,SAIlCC,QAJkC,GAIvB,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClC,aAAOC,KAAK,CAAE,GAAEC,QAAS,SAAb,EAAuB;AACjCC,QAAAA,MAAM,EAAE,MADyB;AAEjCN,QAAAA,OAAO,EAAE;AACPO,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAFwB;AAMjCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAf;AAN2B,OAAvB,CAAL,CAQJQ,IARI,CAQCC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,iBAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,OAZI,EAaJC,KAbI,CAaEC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAfI,CAAP;AAgBD,KArBqC;;AAAA,SAuBlCG,SAvBkC,GAuBtB,CAACjB,KAAD,EAAQC,QAAR,KAAqB;AACnC,aAAOC,KAAK,CAAE,GAAEC,QAAS,SAAb,EAAuB;AACjCC,QAAAA,MAAM,EAAE,MADyB;AAEjCN,QAAAA,OAAO,EAAE;AACPO,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAFwB;AAMjCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAf;AAN2B,OAAvB,CAAL,CAQJQ,IARI,CAQCC,GAAG,IAAI;AACX,eAAOA,GAAG,CAACE,IAAJ,EAAP;AACD,OAVI,EAWJH,IAXI,CAWCS,IAAI,IAAI;AACZ,YAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB;AACD;;AACDC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACxB,KAAnC;AAEA;AACD,OAlBI,CAAP;AAmBD,KA3CqC;;AAAA,SA6ClC4B,UA7CkC,GA6CrB5B,KAAK,IAAI;AACxB,aAAOQ,KAAK,CAAE,GAAEC,QAAS,WAAb,EAAyB;AACnCC,QAAAA,MAAM,EAAE,KAD2B;AAEnCN,QAAAA,OAAO,EAAE;AACPO,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB,kBAFT;AAGPkB,UAAAA,aAAa,EAAG,SAAQ7B,KAAM;AAHvB;AAF0B,OAAzB,CAAL,CAQJe,IARI,CAQCC,GAAG,IAAI;AACX,eAAOA,GAAG,CAACE,IAAJ,EAAP;AACD,OAVI,EAWJH,IAXI,CAWCS,IAAI,IAAIA,IAXT,CAAP;AAYD,KA1DqC;;AAC9B,SAAKM,QAAL,GAAgB3B,OAAhB;AACA,SAAK4B,QAAL,GAAgB3B,OAAhB;AACH;;AAJS;;AA8Dd,OAAO,MAAM4B,OAAO,GAAG,IAAI/B,OAAJ,CAAY;AAC/BE,EAAAA,OAAO,EAAE,gEADsB;AAE/BC,EAAAA,OAAO,EAAE;AAAE,cAAU,kBAAZ;AAAgC,oBAAgB,kBAAhD;AAAoE,qBAAkB,SAAQJ,KAAM;AAApG;AAFsB,CAAZ,CAAhB","sourcesContent":["import { token } from \"./constants.js\"\nclass MainApi {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n    register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ email, password })\n  })\n    .then(res => {\n      if (res.status === 201 || res.status === 200) {\n        return res.json();\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\n    authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ email, password })\n  })\n    .then(res => {\n      return res.json();\n    })\n    .then(data => {\n      if (data.message) {\n        return;\n      }\n      localStorage.setItem(\"token\", data.token);\n\n      return;\n    });\n};\n\n    checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `token=${token}`\n    }\n  })\n    .then(res => {\n      return res.json();\n    })\n    .then(data => data);\n};\n}\n\nexport const mainApi = new MainApi({\n    baseUrl: 'https://api.lmontem-news-explorer.students.nomoreparties.site/',\n    headers: { \"Accept\": \"application/json\", 'Content-Type': 'application/json', \"Authorization\": `token=${token}` }\n});"]},"metadata":{},"sourceType":"module"}