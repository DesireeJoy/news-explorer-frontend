{"ast":null,"code":"const token = localStorage.getItem(\"token\");\n\nclass MainApi {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  getUserInfo() {\n    return fetch(this._baseUrl + 'users/me', {\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.status}`);\n    });\n  }\n\n  getArticles() {\n    return fetch(this._baseUrl + \"articles\", {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return res.json();\n    });\n  }\n\n  saveArticle({\n    title,\n    description,\n    url,\n    urlToImage,\n    publishedAt,\n    keyword,\n    source\n  }) {\n    return fetch(this._baseUrl + 'articles', {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        title,\n        description,\n        url,\n        urlToImage,\n        publishedAt,\n        keyword,\n        source\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.status}`);\n    });\n  }\n\n  deleteArticle(articleId) {\n    return fetch(this._baseUrl + 'articles/' + articleId, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json(); //this makes object out of response\n      }\n\n      return Promise.reject(`Error: ${res.status}`);\n    });\n  }\n\n  register(email, password, name) {\n    return fetch(this._baseUrl + 'signup', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(res => {\n      return res.json();\n    });\n  }\n\n  authorize(email, password) {\n    return fetch(this._baseUrl + 'signin', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      return res.json();\n    });\n  }\n\n  checkToken(token) {\n    return fetch(this._baseUrl + 'users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => res.json()).then(data => data);\n  }\n\n}\n\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.desinews.students.nomoreparties.site/',\n  headers: {\n    'Accept': \"application/json\",\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  }\n});","map":{"version":3,"sources":["/Users/desireebradish/news-explorer-frontend/src/utils/MainApi.js"],"names":["token","localStorage","getItem","MainApi","constructor","baseUrl","headers","_baseUrl","_headers","getUserInfo","fetch","then","res","ok","json","Promise","reject","status","getArticles","method","saveArticle","title","description","url","urlToImage","publishedAt","keyword","source","body","JSON","stringify","deleteArticle","articleId","register","email","password","name","authorize","checkToken","data","mainApi"],"mappings":"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","sourcesContent":["const token = localStorage.getItem(\"token\");\nclass MainApi {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    getUserInfo() {\n        return fetch(this._baseUrl + 'users/me', {\n            headers: this._headers,\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Error: ${res.status}`)\n            })\n    }\n\n    \n\n    getArticles() {\n        return fetch(this._baseUrl + \"articles\", {\n            method: \"GET\",\n            headers: this._headers\n        })\n            .then(res => { return res.json() }\n            )\n    }\n  saveArticle({ title, description, url, urlToImage, publishedAt, keyword, source }) {\n        return fetch(this._baseUrl + 'articles', {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                title,\n                description,\n                url,\n                urlToImage,\n                publishedAt,\n                keyword,\n                source\n            })\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Error: ${res.status}`)\n            })\n    }\n\n\n\n    deleteArticle(articleId) {\n        return fetch(this._baseUrl + 'articles/' + articleId, {\n            method: \"DELETE\",\n            headers: this._headers\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();//this makes object out of response\n                }\n                return Promise.reject(`Error: ${res.status}`)\n            })\n    }\n\n    register(email, password, name) {\n        return fetch(this._baseUrl + 'signup', {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({ email, password, name })\n        })\n            .then((res) => {\n                    return res.json();\n           \n            })\n    }\n\n\n    \n\n    authorize(email, password) {\n        return fetch(this._baseUrl + 'signin', {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({ email, password })\n        })\n            .then(res => {\n                return res.json()\n            })\n    }\n\n    checkToken(token) {\n        return fetch(this._baseUrl + 'users/me', {\n            method: 'GET',\n            headers: this._headers\n        })\n            .then(res => res.json())\n            .then(data => data)\n    }\n\n\n  \n}\n\nexport const mainApi = new MainApi({\n    baseUrl: 'https://api.desinews.students.nomoreparties.site/',\n    headers: {\n      'Accept': \"application/json\",\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n}\n});"]},"metadata":{},"sourceType":"module"}